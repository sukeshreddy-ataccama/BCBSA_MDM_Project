/*
 *  THIS FILE IS MODIFIABLE, IT IS NOT RE-GENERATED BY AME PROJECT
 */

/* PREDEFINED styles : styles defined on individual components (predefined by components) */

/* ====== default template, used when nothing suitable configured ======== */

.t_default-row {
	padding: 0 10px;
}

.t_default-row .TComponentHeader {
	display: none;
}

/* ====== commons, generics of components ======== */

.TComponentHeader {
	display: flex;
	align-items: center;
	height: 24px;
	margin: 20px 0 12px 1px;
}

.TComponentHeader-labelPanel {
	color: #424242;
	font-size: 14px;
	font-weight: 600;
}

.TComponentHeader-actionPanel {
	display: flex;
	flex-flow: row wrap;
	justify-content: flex-end;
	flex-grow: 1;
}

.TComponentHeader-checkboxAllPanel {
	padding: 0 11px 0 20px;
}

.TComponentLabel-empty {
	color: #9e9e9e;
	background-color: #f5f6f8;
	width: 100%;
	height: 46px;
	line-height: 46px;
	margin: 0 auto;
	text-align: center;
	font-size: 13px;
}

.TComponentBody {
}

/* ====== fieldGrid component - typically displays columns and their values ====== */

/* HEADER */
.TFieldGrid-header {
}

/* DATA */
.TFieldGrid-data {
	display: table;
	width: 100%;
}

/* rows */
.TFieldGrid-dataRow {
	display: table-row;
	height: 46px;
}

.TFieldGrid-dataRow:HOVER {
	background: #F0F0F0;
}

.TFieldGrid-dataRow-odd {
}

.TFieldGrid-dataRow-even {
}

.TFieldGrid-dataRow-first {
}

.TFieldGrid-dataRow-last {
}

.TFieldGrid-row-separator {
	display: table-row;
	box-shadow: 0 1px #ececec;
}

/* fields */
.TFieldGrid-field {
}

.TFieldGrid-field-header {
	color: #9e9e9e;
	padding: 0 1em 0 20px;
}

.TFieldGrid-field-separator {
}

.TFieldGrid-field-value {
	color: #383838;
	padding-right: 12px;
	width: 100%;
}

/* ====== stringTemplate component - has ability to dynamically render content ====== */

.TStringTemplate .TComponentBody {
	background: transparent;
	border: 0;
}

/* ====== rowIterator component - displaying 1:n and m:n relations ====== */

.TRowIterator-row {
	padding: 0 20px;
	min-height: 45px;
	display: flex;
	align-items: center;
}

.TRowIterator-row-even {
}

.TRowIterator-row-odd {
}

.TRowIterator-row:HOVER {
	background: #F0F0F0;
}

.TRowIterator-row-last {
}

.TRowIterator-row-selected {
	background: #F0F0F0;
}

.TRowIterator-row-separator {
	border-bottom: 1px solid #e0e0e0;
}

/* wrapped rowIterator's rows if there is a selection model enabled */
.TRowIterator-row-selectionWrapper {
	cursor: default;
}

/* ====== rowGrid & pager/nonPagedStatusBar component - displays listing table, eg. master's instances ====== */

/* status bar under the RowGrid when paged=false */
.TCNonPagedStatusBar {
}
/* label in the status bar when paged=false (pager replacement) it displays just rows range, e.g. 1-10 or 0-0  */
.TCNonPagedStatusBarLabel {
	padding: 1px 5px;
}

/* ============= tabPanel component - displays nested content in tabs ========= */

/* Tab headers panel container */
.TTabHeaders {
	margin-top: 20px;
}

/* Tab content panel container */
.TTabContent {
	padding: 0 10px 10px;
	border: 1px solid #e0e0e0;
}

/* Tab header customization */
.TTabHeader {
	margin-right: 20px;
	padding: 2px 5px;
	white-space: nowrap;
	border-bottom: 2px solid #DBD8E2;
}
.TTabHeader.selected, .TTabHeader.selected:hover {
	text-shadow: 0 0 1px;
	border-bottom: 2px solid #4A3C6D;
}
.TTabHeader:hover {
	border-bottom: 2px solid #4A3C6D;
}

/* Tab header's image */
.TTabImage {
}

/* Tab header's label */
.TTabLabel {
}

/* ============= switchOptions component - provides functionality of switching between many options ========= */

.TOptionSwitch {
}



/* LOCAL styles - user-defined and referenced from tmpl or layout file */

/* LAYOUT */

/* border of component's body */
.TFieldGrid .TComponentBody,
.TRowIterator > .TComponentBody {
	border: solid 1px #e0e0e0;
	border-radius: 2px;
	background: #fff;
}
.TRowIterator-dataError .TComponentBody,
.TRowGrid-dataError .TComponentBody {
	border: solid 1px rgba(255, 82, 82, 0.3);
	border-radius: 2px;
	background: #fff;
}

/* MDM-2731 IE 10 & 11 hotfix: too long text overflows component contents */
@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
	.TFieldGrid .TComponentBody,
	.TRowIterator > .TComponentBody {
		overflow-y: auto;
	}
}

.t_bordered-section {
	border: solid 1px #e0e0e0;
	border-radius: 2px;
	background-color: #FFF;
	padding: 0;
	width: 570px;
}

.editMode.t_bordered-section {
	border: 1px solid #C7BED3;
}

/* main layouts */
.t_main-content {
	margin: 0 auto;
	padding-bottom: 1px;
}

.t_main-content-columns {
	display: flex;
	flex-flow: row wrap;
	justify-content: center;
	padding: 0 10px;
}

.t_main-content-column {
	flex: 1 1 500px;
	padding: 0 10px;
	max-width: 601px;
}

.t_main-content-rows {
	padding: 0 10px;
}

.t_main-content-row {
	flex: 1 1 auto;
	padding: 0 10px;
}

/* inner rowIterator styling, displaying 1:n and m:n related data */
.rowIteratorHeader {
	color: #9B9B9B;
	width: 35%;
}

.rowIteratorFieldSeparator {
	width: 1em;
}

.rowIteratorValue-validation {
	display: flex;
	flex: 1 1 auto;
	align-items: center;
}

.rowIteratorValue {
    display: flex;
    align-items: center;
	flex: 1 1 auto;
	margin-right: 12px;
    padding-left: 4px;
}

.data-value {
	color: #383838;
	white-space: pre-wrap;
}

.data-value > div {
	display: flex;
	flex-flow: row;
	flex-wrap: wrap;
	align-items: center;
}

.data-value span:not (:empty ) {
	padding-left: .2em;
}

.data-value span.literal {
	color: #888;
}

.linkImage {
	width: 12px;
	opacity: .4;
}

.TRowIterator-row:hover .linkImage {
	opacity: 1;
}

.linkImage:HOVER {
	cursor: pointer;
}

/* Inner rowGrid styling - this is component used for master's instances */
.TRowGrid-grid {
}

/* hide field grid component label inside tabs */
.TTabContent .TFieldGrid>.TComponentHeader {
	padding: 0;
	margin: 0;
	height: 10px;
}
.TTabContent .TFieldGrid>.TComponentHeader * {
	display: none;
}

/* components action buttons */
.TComponentElement-disabled.headerButton {
	display: none !important;
}

.headerButton {
	background: #fff;
	border: 1px solid #e0e0e0;
	border-radius: 2px;
	padding: 2px 10px 2px 7px;
	align-items: center;
	white-space: nowrap;
	color: #757575;
	-webkit-transition: background .3s;
	-moz-transition: background .3s;
	-o-transition: background .3s;
	transition: background .3s;
}

.headerButton:HOVER {
	cursor: pointer;
	color: #000;
	background: #F0F0F0;
}

.headerButtonAction-list-all[total-count]:after {
	content: attr(total-count);
	padding-left: .3em;
}

/* active and inactive record styling */
.rowState-active--false .data-value > * {
	color: #9b9b9b;
	border-bottom: 1px dashed currentColor;
}

/* authored indication of related records */
.rowIteratorHeader .rowState-owned--true {
	display: inline-block;
}

.rowIteratorHeader .rowState-owned--,
.rowIteratorHeader .rowState-owned--false {
	display: none;
}

/* validations */
.atc-errorField, .atc-warnField, .atc-infoField {
	/* copy of styles from native css class .atcTextBox that is rendered in edit mode - to ensure consistency */
	padding: 0 4px;
	min-height: 34px;
	height: 1px; /* ie11 align-items: center; workaround */
	min-width: 34px;
	line-height: 140%;
	display: flex;
	flex-flow: row;
	align-items: center;
}

.atc-errorField {
	background-color: rgba(255, 82, 82, 0.1);
	border: 1px solid rgba(255, 82, 82, 0.3);
	border-radius: 2px;
}

.editMode .atc-errorField {
	border: 1px solid rgba(255, 82, 82, 0.5);
}

.atc-warnField {
	background-color: rgba(255, 219, 102, 0.15);
	border: 1px solid rgba(255, 219, 102, 0.45);
	border-radius: 2px;
}

.editMode .atc-warnField {
	border: 1px solid rgba(255, 219, 102, 0.6);
}

.atc-infoField {
	background-color: rgba(58, 139, 255, 0.1);
	border: 1px solid rgba(58, 139, 255, 0.3);
	border-radius: 2px;
}

.editMode .atc-infoField {
	border: 1px solid rgba(58, 139, 255, 0.5);
}

.atc-errorRow .rowIteratorValue {
	background-color: rgba(255, 82, 82, 0.1);
	border: 1px solid rgba(255, 82, 82, 0.3);
	border-radius: 2px;
	min-height: 34px;
	height: 1px; /* ie11 align-items: center; workaround */
}

.atc-warnRow .rowIteratorValue {
	background-color: rgba(255, 219, 102, 0.15);
	border: 1px solid rgba(255, 219, 102, 0.45);
	border-radius: 2px;
	min-height: 34px;
	height: 1px; /* ie11 align-items: center; workaround */
}

.atc-errorRow .atc-infoField,
.atc-errorRow .atc-warnField,
.atc-errorRow .atc-errorField,
.atc-warnRow .atc-infoField,
.atc-warnRow .atc-warnField,
.atc-warnRow .atc-errorField,
.atc-infoRow .atc-infoField,
.atc-infoRow .atc-warnField,
.atc-infoRow .atc-errorField {
	min-height: 24px;
	border: none;
}

/* exclamation mark in error field and error row */
/*.atc-errorField:after, .atc-errorRow .rowIteratorValue .atc-control-link-panel:after {
	content: "!";
	color: rgb(255, 82, 82);
	font-size: 22px;
	font-weight: bold;
	width: 14px;
	text-align: center;
	margin-left: auto;
}*/

/* do not show exclamation mark in error field inside related rows */
/*.rowIteratorValue .atc-errorField:after {
	display: none;
}*/

/* entity label */
.TEntityLabel {
	max-width: 20em;
	min-width: 0;
	text-overflow: ellipsis;
	overflow: hidden;
	white-space: nowrap;
}

.TClickable:hover {
	cursor: pointer;
}

/* errors reported inside components */
.TProblem {
	color: rgba(255, 82, 82, 1);
	padding: 0 20px;
	overflow: auto;
}
.TProblem-info {
	line-height: 46px;
}
.TProblem-description {
	font-size: 10px;
	padding-bottom: 5px;
}



/* CUSTOM LAYOUT STYLES */

.t_main-content.t_columns-2 {
	max-width: 1215px;
}

.t_main-content.t_columns-3 {
	max-width: 1823px;
}

.t_compact .TComponentHeader {
	margin: 20px 0 7px 1px;
}
.t_compact .TComponentHeader-checkboxAllPanel {
	padding: 0 10px 0 12px;
}
.t_compact .TComponentLabel-empty {
	height: 28px;
	line-height: 28px;
}
.t_compact .TFieldGrid-dataRow {
	height: 28px;
}
.t_compact .TFieldGrid-field-header {
	padding: 0 1em 0 12px;
}
.t_compact .TRowIterator-row {
	padding: 0 12px;
	min-height: 28px;
}
.t_compact .rowIteratorValue {
	margin-right: 5px;
    padding-left: 3px;
}
.t_compact .TProblem {
	padding: 0 12px;
}
.t_compact .TProblem-info {
	line-height: 28px;
}
.t_compact .headerButton {
	padding: 1px 6px;
}
.t_compact .atc-errorField, .t_compact .atc-warnField, .t_compact .atc-infoField {
	padding: 0 4px;
	min-height: 24px;
	min-width: 24px;
}
.t_compact .atc-errorRow .rowIteratorValue {
	min-height: 26px;
}
.t_compact .atc-warnRow .rowIteratorValue {
	min-height: 26px;
}
.t_compact .atc-errorRow .atc-infoField,
.t_compact .atc-errorRow .atc-warnField,
.t_compact .atc-errorRow .atc-errorField,
.t_compact .atc-warnRow .atc-infoField,
.t_compact .atc-warnRow .atc-warnField,
.t_compact .atc-warnRow .atc-errorField,
.t_compact .atc-infoRow .atc-infoField,
.t_compact .atc-infoRow .atc-warnField,
.t_compact .atc-infoRow .atc-errorField {
	min-height: 18px;
	border: none;
}